--------------------------------- U57: Byggverktyget Make --------------------------

Visa makefil och förklara grejerna, alt skicka in
Frågor från skriftlig inlämning:
---- Vad är make bra för?

Underlätta för programmeraren genom att göra kompilering och körning av filer lättare.
Med simplare kommandon undviker man stavfel, glömma flaggor och/eller filer osv.
Variabler gör det lätt att byta t.ex. flaggor, kompilator. 

Prestanda-/maskinmässigt kompileras/länkas filerna när de har uppdaterats.


---- Förklara hur en/några regler fungerar
memtest kör våra tester med Valgrind. Beror på regeln business_logic, som i sin tur beror på ett gäng o-filer.
För varje o-fil finns en regel, som beror på respektive c-fil. Här når vi botten i beroendeträdet och regeln körs.
Vi kompilerar med angiven kompilator och flaggor ($^ betyder "all prerequisites" - behövs den verkligen i %.o-regeln?). 
o-filerna har skapats (?) och business_logic-regeln körs. Kompilerar och länkar (?) filerna, lägger output i tests.out.
Vi kommer tillbaka till memtest-regeln som nu kör valgrind med tests.out


---- PHONY
Används för regler som inte bygger något. T.ex. clean-regeln. Alla våra commands egentligen? Eller räknas dom inte pga att
dom kräver att något annat byggs?


---- Förklara hur vi använder make och hur make hanterar beroenden

Vi anger regler för att kompilera, köra, städa upp. Reglerna gör att vi behöver skriva mindre i terminalen. Vi ropar på reglerna 
och make hjälper oss att köra de faktiska kommandon. 
Avseende beroenden håller det koll på huruvida en fil uppdaterats. Om inte behöver vi inte kompilera och länka om, annars
kompilerar och länkar make det som behövs. 


-------------------------------- A3: Informationsgömning ---------------------------

Utgå från business_logic.c

Tanken är att ge en pontentiell användare tillgång till funktioner med vetskap om VAD de gör, men inte HUR de gör det.
Låta någon göra saker utan att veta hur det utförs.
Vi uppfinner och skapar verktyg, ger de till någon och säger "här, gör saker", därmed behöver personen inte skapa dem igen.

Visa ioopm_merchandise_edit, implementation jämfört med h-fil och vad en användare behöver veta.

Påpeka att funktioner är krångliga att förstå, men dokumentationen är inte det.

------------------------------- D9: Dokumentation ------------------------------------


---- Det är svårt att balansera mängden dokumentation som krävs för att beskriva något. Vem vänder man sig till? 

Målgruppen är programmerare i vårt och många andra fall. Låt någon som inte varit med och skrivit koden försöka förstå den.


---- Vad kan man förvänta sig hos den som läser?

Att personen har förväntade förkunskaper. Dvs är något programmeringsvan.

---- Vad vill denne åstadkomma?

Kunna använda verktygen, hur de funkar. Hur de inte funkar (vad man inte får göra)
    
 
---- Vad är en bra balans mellan för lite information och för mycket?

1. Avslöjar för mycket om vad som händer i koden (som användaren inte behöver veta)
2. Skriver för mycket, blir jobbigt att läsa och blir otydligt var den viktiga informationen är.

3. Om man inte varnar om sätt funktionen inte får användas på.
4. Inte beskriver indata, utdata tillräckligt så blir det svårt att använda koden.

 ---- Vad är en lämplig detaljnivå?
 
 Beskrivs ovan
 
 
---- Hur mycket av den interna implementationen bör man beskriva? Varför?

Så lite som möjligt. För att det är onödigt att veta mer

---- Hur beskriver man komplexa och tvetydiga processer?

Väl



Hur man använder doxygen:

1. gå in i rätt directory i terminalen
2. kör "doxygen Doxygen"
3. kör "cd html/"
4. kör "firefox index.html" (eller annan browser)
5. tryck på files
6. Gå runt och kolla på dokumentation

make clean tar bort mapparna html och latex
